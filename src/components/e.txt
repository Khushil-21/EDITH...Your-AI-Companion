"use client";

import React, { useEffect, useRef, useState } from "react";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import {
	getGlobalConversation,
	setGlobalConversation,
} from "@/lib/GlobalConversation";

export default function PromptBox() {
	const inputRef = useRef(null);
	useEffect(() => {
		const handleKeyDown = (e) => {
			if (e.ctrlKey && e.key === "/") {
				inputRef.current.focus(); // Focus on the input
			}
		};

		window.addEventListener("keydown", handleKeyDown);

		// Cleanup function for the event listener
		return () => {
			window.removeEventListener("keydown", handleKeyDown);
		};
	}, []);
	let [userInput, setUserInput] = useState("");
	const queryClient = useQueryClient();
	const { mutate } = useMutation({
		mutationFn: () => {
			setGlobalConversation("User", userInput);
		},
		onSuccess: () => {
			queryClient.invalidateQueries(["chat"]);
			setUserInput("");
		},
		onError: () => {
			console.log("error");
		},
	});
	async function handleSubmit(e) {
		if (!userInput) return;
		mutate()
	}

	return (
		<div className="flex justify-center items-center h-[12%]">
			<div className="w-1/2 flex gap-4">
				<Input
					type="email"
					placeholder="Ask Your Doubt "
					onChange={(e) => {
						setUserInput(e.target.value);
					}}
					value={userInput || ""}
					onKeyDown={(e) => {
						if (e.key === "Enter") {
							// inputRef.current.blur();
							handleSubmit();
						}
					}}
					ref={inputRef}
				/>
				<Button type="submit" onClick={handleSubmit}>
					Send
				</Button>
			</div>
		</div>
	);
}



















"use client";
import React, { useState } from "react";

import ChatHeader from "./ChatHeader";
import PromptBox from "./PromptBox";
import ChatArea from "./ChatArea";
export default function ChatSection() {
	let [userInput, setUserInput] = useState("");
	const [conversation, setConversation] = useState([]);

	return (
		<div className="p-4 flex flex-col  border-green-600 h-full flex-1">
			<ChatHeader setConversation={setConversation} />
			<ChatArea />
			<PromptBox />
		</div>
	);
}





















"use client";
import React, { useEffect, useRef, useState } from "react";
import { ScrollArea } from "./ui/scroll-area";
import { Avatar, AvatarFallback, AvatarImage } from "./ui/avatar";
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import { getGlobalConversation } from "@/lib/GlobalConversation";

export default function ChatArea() {
	const { data: conversation } = useQuery({
		queryKey: ["chat"],
		queryFn: getGlobalConversation,
		staleTime: 1,
		refetchInterval: 1,
		refetchIntervalInBackground: true,
		refetchOnWindowFocus: `always`,
	});
	console.log(conversation);
	return (
		<div className="flex-1 overflow-auto flex justify-center items-center">
			<ScrollArea className="w-[90%] py-5 px-4 border-2 h-full  rounded-md ">
				{conversation?.map((value) => {
					return (
						<div key={""} className="flex flex-col gap-2">
							{/* <div
									className={`max-w-[60%] flex items-center ${
										value.Role === "User" ? " justify-end " : " justify-start "
									}`}
								>
									<div
										className={`px-7 py-2 rounded-md ${
											value.Role === "User"
												? " bg-black text-white "
												: " bg-gray-400 text-white "
										}`}
									>
										{value.Message}
									</div>
								</div> */}

							<div
								className={`chat rounded-md  ${
									value.Role === "User" ? " chat-end " : " chat-start "
								}`}
							>
								<div
									className={`w-full flex items-center gap-3 ${
										value.Role === "User" ? " justify-end " : " justify-start "
									}`}
								>
									{value.Role === "Edith" && (
										<Avatar>
											<AvatarImage src="https://iconape.com/wp-content/png_logo_vector/robot.png" />
											<AvatarFallback>
												{value.Role === "User" ? "U" : "E"}
											</AvatarFallback>
										</Avatar>
									)}
									<div
										className={`gap-2 my-3 chat-bubble max-w-[90%] px-7 py-2 rounded-md flex flex-col justify-center items-start ${
											value.Role === "User"
												? " bg-black text-white rounded-tr-none "
												: " bg-gray-400 text-white rounded-tl-none"
										}`}
									>
										{value.Message.split("\n").map((line, index) => {
											return <div key={index}>{line}</div>;
										})}
									</div>
									{value.Role === "User" && (
										<Avatar>
											<AvatarImage src="https://t3.ftcdn.net/jpg/05/53/79/60/360_F_553796090_XHrE6R9jwmBJUMo9HKl41hyHJ5gqt9oz.jpg" />
											<AvatarFallback>
												{value.Role === "User" ? "U" : "E"}
											</AvatarFallback>
										</Avatar>
									)}
								</div>
							</div>
						</div>
					);
				})}
			</ScrollArea>
		</div>
	);
}
